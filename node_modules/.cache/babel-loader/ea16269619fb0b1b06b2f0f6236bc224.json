{"ast":null,"code":"var _jsxFileName = \"/home/dci/Desktop/Repos/portfolio-frontend/src/Views/WebApps/Password-Generator/PasswordGenerator.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PasswordGenerator = () => {\n  _s();\n\n  // Charset\n  const charset = \"abcdefghijklmnopqrstuvwxyz0123456789!ยง$%&/()=?#,;.:-_\"; // ? State Hooks\n  // Password\n\n  let [password, setPassword] = useState(\"\"); // length of password\n\n  let [passwordLength, setPasswordLength] = useState(); // Mixed Case\n\n  let [mixedCase, setMixedCase] = useState(false); // ? Collect user input Data 'onChange' event\n\n  const collectInput = event => {\n    switch (event.target.name) {\n      // Collect password length\n      case \"passwordLength\":\n        setPasswordLength(event.target.value);\n        break;\n      // ! If checkbox is checked then true - else false\n\n      case \"mixedCase\":\n        if (event.target.checked) {\n          setMixedCase(true);\n        } else {\n          setMixedCase(false);\n        }\n\n        break;\n\n      default:\n        break;\n    }\n  }; // Testing..\n\n\n  console.log(passwordLength);\n  console.log(mixedCase); // ? Define password function\n\n  const definePassword = event => {\n    event.preventDefault();\n    let calculatingPassword = \"\";\n\n    for (let i = 0; i < passwordLength; i++) {\n      let index = Math.floor(Math.random() * charset.length);\n\n      if (mixedCase === true) {\n        if (i > 0 && i % 3 === 0) {\n          calculatingPassword += charset[index].toLocaleUpperCase();\n        } else {\n          calculatingPassword += charset[index];\n        }\n      } else {\n        calculatingPassword += charset[index];\n      }\n    } // *  Default password length if no number is selected\n\n\n    if (passwordLength < 1) {\n      for (let i = 0; i < 20; i++) {\n        let index = Math.floor(Math.random() * charset.length);\n\n        if (mixedCase === true) {\n          if (i > 0 && i % 3 === 0) {\n            calculatingPassword += charset[index].toLocaleUpperCase();\n          } else {\n            calculatingPassword += charset[index];\n          }\n        } else {\n          calculatingPassword += charset[index];\n        }\n      }\n    }\n\n    setPassword(calculatingPassword); // Reset input fields\n\n    setPasswordLength(\"\"); // !!! Search how to 'uncheck' checkbox on form submit\n    // setMixedCase();\n  }; // !!!\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"password-generator-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"password-generator-heading\",\n      children: \"Random Password Generator\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"password-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"password-subheadings\",\n        children: \"Choose password length (Default = 20 characters)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"define-number-input\",\n        type: \"number\",\n        name: \"passwordLength\",\n        onChange: collectInput,\n        value: passwordLength,\n        placeholder: \"Password length..\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"checkbox-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"password-subheadings\",\n          children: \"Use mixed cases?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          name: \"mixedCase\",\n          onChange: collectInput,\n          id: \"checkbox\",\n          type: \"checkbox\" //   checked=\"checked\"\n\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"generate-button\",\n        onClick: definePassword,\n        children: \"Generate Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"password-subheadings new-password\",\n        children: \"Your new password:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"output\",\n        children: password\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PasswordGenerator, \"FBn8ZEf1inRUE9aQVE1eEkQosW4=\");\n\n_c = PasswordGenerator;\nexport default PasswordGenerator;\n\nvar _c;\n\n$RefreshReg$(_c, \"PasswordGenerator\");","map":{"version":3,"sources":["/home/dci/Desktop/Repos/portfolio-frontend/src/Views/WebApps/Password-Generator/PasswordGenerator.js"],"names":["React","useState","PasswordGenerator","charset","password","setPassword","passwordLength","setPasswordLength","mixedCase","setMixedCase","collectInput","event","target","name","value","checked","console","log","definePassword","preventDefault","calculatingPassword","i","index","Math","floor","random","length","toLocaleUpperCase"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\n\nconst PasswordGenerator = () => {\n  // Charset\n  const charset = \"abcdefghijklmnopqrstuvwxyz0123456789!ยง$%&/()=?#,;.:-_\";\n\n  // ? State Hooks\n  // Password\n  let [password, setPassword] = useState(\"\");\n  // length of password\n  let [passwordLength, setPasswordLength] = useState();\n  // Mixed Case\n  let [mixedCase, setMixedCase] = useState(false);\n\n  // ? Collect user input Data 'onChange' event\n  const collectInput = (event) => {\n    switch (event.target.name) {\n      // Collect password length\n      case \"passwordLength\":\n        setPasswordLength(event.target.value);\n        break;\n      // ! If checkbox is checked then true - else false\n      case \"mixedCase\":\n        if (event.target.checked) {\n          setMixedCase(true);\n        } else {\n          setMixedCase(false);\n        }\n        break;\n      default:\n        break;\n    }\n  };\n\n  // Testing..\n  console.log(passwordLength);\n  console.log(mixedCase);\n\n  // ? Define password function\n  const definePassword = (event) => {\n    event.preventDefault();\n\n    let calculatingPassword = \"\";\n\n    for (let i = 0; i < passwordLength; i++) {\n      let index = Math.floor(Math.random() * charset.length);\n\n      if (mixedCase === true) {\n        if (i > 0 && i % 3 === 0) {\n          calculatingPassword += charset[index].toLocaleUpperCase();\n        } else {\n          calculatingPassword += charset[index];\n        }\n      } else {\n        calculatingPassword += charset[index];\n      }\n    }\n\n    // *  Default password length if no number is selected\n    if (passwordLength < 1) {\n      for (let i = 0; i < 20; i++) {\n        let index = Math.floor(Math.random() * charset.length);\n\n        if (mixedCase === true) {\n          if (i > 0 && i % 3 === 0) {\n            calculatingPassword += charset[index].toLocaleUpperCase();\n          } else {\n            calculatingPassword += charset[index];\n          }\n        } else {\n          calculatingPassword += charset[index];\n        }\n      }\n    }\n\n    setPassword(calculatingPassword);\n    // Reset input fields\n    setPasswordLength(\"\");\n\n    // !!! Search how to 'uncheck' checkbox on form submit\n    // setMixedCase();\n  };\n\n  // !!!\n\n  return (\n    <div className=\"password-generator-container\">\n      <h1 className=\"password-generator-heading\">Random Password Generator</h1>\n\n      <form className=\"password-form\">\n        <label className=\"password-subheadings\">\n          Choose password length (Default = 20 characters)\n        </label>\n        <input\n          className=\"define-number-input\"\n          type=\"number\"\n          name=\"passwordLength\"\n          onChange={collectInput}\n          value={passwordLength}\n          placeholder=\"Password length..\"\n        ></input>\n\n        <div className=\"checkbox-container\">\n          <span className=\"password-subheadings\">Use mixed cases?</span>\n          <input\n            name=\"mixedCase\"\n            onChange={collectInput}\n            id=\"checkbox\"\n            type=\"checkbox\"\n            //   checked=\"checked\"\n          />\n        </div>\n        <button className=\"generate-button\" onClick={definePassword}>\n          Generate Password\n        </button>\n\n        <label className=\"password-subheadings new-password\">\n          Your new password:\n        </label>\n        <div className=\"output\">{password}</div>\n      </form>\n    </div>\n  );\n};\n\nexport default PasswordGenerator;\n"]},"metadata":{},"sourceType":"module"}