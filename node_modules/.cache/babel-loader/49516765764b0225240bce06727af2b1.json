{"ast":null,"code":"var _jsxFileName = \"/home/dci/Desktop/Repos/portfolio-frontend/src/Views/Contact/Contact.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport NavBar from \"../../Components/NavBar/NavBar\";\nimport ContactForm from \"./ContactForm\"; // import axios from \"axios\";\n// AOS\n\nimport Aos from \"aos\";\nimport \"aos/dist/aos.css\"; // Toast Alerts\n\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\ntoast.configure(); // process.env for server is saved in Vercel\n\nlet URL = process.env.REACT_APP_BACKEND_URL; // ? Main Contact component\n\nconst Contact = () => {\n  _s();\n\n  // State Hooks\n  const [userName, setUserName] = useState(\"\");\n  const [userEmail, setUserEmail] = useState(\"\");\n  const [userMessage, setUserMessage] = useState(\"\");\n  const [userSubject, setUserSubject] = useState(\"\"); // Will disable form after submit\n\n  const [isDisabled, setIsDisabled] = useState(false); // AOS functionality\n\n  useEffect(() => {\n    Aos.init({\n      duration: 1000,\n      once: true\n    });\n  }, []); //  Toast alerts\n  // Form not filled in properly alert\n\n  const fillAllFieldsNotification = () => {\n    toast.error(\"Please fill in all fields ðŸ‘€ \", {\n      position: \"top-center\",\n      draggable: false\n    });\n  };\n\n  const sendingNotification = () => {\n    toast.info(\"Message sending.. \", {\n      position: \"top-center\",\n      draggable: false\n    });\n  }; // ! incorrect email alert\n  // const incorrectEmailAlert = () => {\n  //   toast.error(\"Please enter a valid email address ðŸ“§ \", {\n  //     position: \"top-center\",\n  //     draggable: false,\n  //   });\n  // };\n  // Message sent alert\n\n\n  const messageSentNotification = () => {\n    toast(\"Message sent! Thanks for writing! ðŸŽ‰ ðŸŒ· \", {\n      position: \"top-center\",\n      draggable: false\n    });\n  }; // Message failed alert (on catch error)\n\n\n  const messageFailedNotification = () => {\n    toast.error(\"Message failed to send ðŸ˜” \", {\n      position: \"top-center\",\n      draggable: false\n    });\n  }; // ? Function to get/update the user input via event.target.value\n\n\n  const updateUserData = event => {\n    // using switch statement to run through rather than making an individual handle function for each field - can add more if need be\n    switch (event.target.name) {\n      case \"userName\":\n        setUserName(event.target.value);\n        break;\n\n      case \"userEmail\":\n        setUserEmail(event.target.value);\n        break;\n\n      case \"userMessage\":\n        setUserMessage(event.target.value);\n        break;\n\n      case \"userSubject\":\n        setUserSubject(event.target.value);\n        break;\n\n      default:\n        break;\n    }\n  }; // ? Form validation\n  // To check all fields are filled out correctly - condition to be passed inside  handleUserData()\n\n\n  const handleErrorChecking = () => {\n    // validation is set to false\n    let validationSuccessful = false; // if all filed input conditions are met ..\n\n    if (userName.length >= 1 && userSubject.length >= 1 && userMessage.length >= 2 && /^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$/.test(userEmail)) {\n      //.. validation is set to true\n      validationSuccessful = true; // console.log(\"!!validation successful!!\");\n    } // !!! Come back and check this.. and comment out type=\"email\" in form\n    // ! Check for incorrect email..\n    // if (userEmail !== /^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$/.test(userEmail)) {\n    //   validationSuccessful = false;\n    //   incorrectEmailAlert();\n    // }\n    // Otherwise false and an error alert telling user to fill in all fields will be displayed\n    else {\n      validationSuccessful = false; // Toast error alert\n\n      fillAllFieldsNotification();\n    }\n\n    return validationSuccessful;\n  }; // ? Handle user data -\n\n\n  const handleUserData = async event => {\n    // Prevent from from reloading before submitting\n    event.preventDefault(); // axios.post(`${URI}/send`, { test: \"ok\" });\n    // If the form validation has been passed, create user data object..\n\n    if (handleErrorChecking()) {\n      // console.log(`!!!!!! name:`, userName);\n      // console.log(`!!!!!! email:`, userEmail);\n      // console.log(`!!!!!! message:`, userMessage);\n      // Collect data\n      let data = {\n        name: userName,\n        subject: userSubject,\n        email: userEmail,\n        message: userMessage\n      }; // 'try' post fetch request..\n\n      try {\n        sendingNotification();\n        const response = await fetch( // ! URI is defined at top of page for dev or production\n        `${URL}/send`, {\n          method: \"POST\",\n          headers: {\n            \"Content-type\": \"application/json\"\n          },\n          body: JSON.stringify(data)\n        }); // Wait for the response and parse json data\n\n        const res = await response.json(); // console.log(response);\n        // On successful fetch (passed backend conditions) - handled in onSubmit of form..\n        // Alert user of success, reset the form and disable the form..\n\n        if (res.status === \"success\") {\n          // Toast message success notification\n          messageSentNotification(); // Reset form..\n\n          setUserName(\"\");\n          setUserSubject(\"\");\n          setUserEmail(\"\");\n          setUserMessage(\"\"); // Disable form after successful submit\n\n          setIsDisabled(true);\n        } // console.log(res);\n\n      } catch (error) {\n        // Otherwise catch the error - will prevent the app from crashing even if the server is down..\n        console.log(\"!!!!!\", error); // Toast message letting user know that message sending failed\n\n        messageFailedNotification();\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(NavBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"contact-page-main-container\",\n      children: /*#__PURE__*/_jsxDEV(ContactForm, {\n        handleUserData: handleUserData,\n        isDisabled: isDisabled,\n        updateUserData: updateUserData,\n        userName: userName,\n        userSubject: userSubject,\n        userEmail: userEmail,\n        userMessage: userMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Contact, \"H1hMLlBa355Wib6G0OX8qyjWyNc=\");\n\n_c = Contact;\nexport default Contact;\n\nvar _c;\n\n$RefreshReg$(_c, \"Contact\");","map":{"version":3,"sources":["/home/dci/Desktop/Repos/portfolio-frontend/src/Views/Contact/Contact.js"],"names":["React","useState","useEffect","NavBar","ContactForm","Aos","toast","configure","URL","process","env","REACT_APP_BACKEND_URL","Contact","userName","setUserName","userEmail","setUserEmail","userMessage","setUserMessage","userSubject","setUserSubject","isDisabled","setIsDisabled","init","duration","once","fillAllFieldsNotification","error","position","draggable","sendingNotification","info","messageSentNotification","messageFailedNotification","updateUserData","event","target","name","value","handleErrorChecking","validationSuccessful","length","test","handleUserData","preventDefault","data","subject","email","message","response","fetch","method","headers","body","JSON","stringify","res","json","status","console","log"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport NavBar from \"../../Components/NavBar/NavBar\";\nimport ContactForm from \"./ContactForm\";\n\n// import axios from \"axios\";\n\n// AOS\nimport Aos from \"aos\";\nimport \"aos/dist/aos.css\";\n\n// Toast Alerts\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\ntoast.configure();\n\n// process.env for server is saved in Vercel\nlet URL = process.env.REACT_APP_BACKEND_URL;\n\n// ? Main Contact component\nconst Contact = () => {\n  // State Hooks\n  const [userName, setUserName] = useState(\"\");\n  const [userEmail, setUserEmail] = useState(\"\");\n  const [userMessage, setUserMessage] = useState(\"\");\n  const [userSubject, setUserSubject] = useState(\"\");\n  // Will disable form after submit\n  const [isDisabled, setIsDisabled] = useState(false);\n\n  // AOS functionality\n  useEffect(() => {\n    Aos.init({ duration: 1000, once: true });\n  }, []);\n\n  //  Toast alerts\n  // Form not filled in properly alert\n  const fillAllFieldsNotification = () => {\n    toast.error(\"Please fill in all fields ðŸ‘€ \", {\n      position: \"top-center\",\n      draggable: false,\n    });\n  };\n\n  const sendingNotification = () => {\n    toast.info(\"Message sending.. \", {\n      position: \"top-center\",\n      draggable: false,\n    });\n  };\n\n  // ! incorrect email alert\n  // const incorrectEmailAlert = () => {\n  //   toast.error(\"Please enter a valid email address ðŸ“§ \", {\n  //     position: \"top-center\",\n  //     draggable: false,\n  //   });\n  // };\n\n  // Message sent alert\n  const messageSentNotification = () => {\n    toast(\"Message sent! Thanks for writing! ðŸŽ‰ ðŸŒ· \", {\n      position: \"top-center\",\n      draggable: false,\n    });\n  };\n\n  // Message failed alert (on catch error)\n  const messageFailedNotification = () => {\n    toast.error(\"Message failed to send ðŸ˜” \", {\n      position: \"top-center\",\n      draggable: false,\n    });\n  };\n\n  // ? Function to get/update the user input via event.target.value\n  const updateUserData = (event) => {\n    // using switch statement to run through rather than making an individual handle function for each field - can add more if need be\n    switch (event.target.name) {\n      case \"userName\":\n        setUserName(event.target.value);\n        break;\n      case \"userEmail\":\n        setUserEmail(event.target.value);\n        break;\n      case \"userMessage\":\n        setUserMessage(event.target.value);\n        break;\n      case \"userSubject\":\n        setUserSubject(event.target.value);\n        break;\n      default:\n        break;\n    }\n  };\n\n  // ? Form validation\n  // To check all fields are filled out correctly - condition to be passed inside  handleUserData()\n  const handleErrorChecking = () => {\n    // validation is set to false\n    let validationSuccessful = false;\n\n    // if all filed input conditions are met ..\n    if (\n      userName.length >= 1 &&\n      userSubject.length >= 1 &&\n      userMessage.length >= 2 &&\n      /^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$/.test(userEmail)\n    ) {\n      //.. validation is set to true\n      validationSuccessful = true;\n      // console.log(\"!!validation successful!!\");\n    }\n\n    // !!! Come back and check this.. and comment out type=\"email\" in form\n    // ! Check for incorrect email..\n    // if (userEmail !== /^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$/.test(userEmail)) {\n    //   validationSuccessful = false;\n    //   incorrectEmailAlert();\n    // }\n\n    // Otherwise false and an error alert telling user to fill in all fields will be displayed\n    else {\n      validationSuccessful = false;\n      // Toast error alert\n      fillAllFieldsNotification();\n    }\n    return validationSuccessful;\n  };\n\n  // ? Handle user data -\n  const handleUserData = async (event) => {\n    // Prevent from from reloading before submitting\n    event.preventDefault();\n\n    // axios.post(`${URI}/send`, { test: \"ok\" });\n    // If the form validation has been passed, create user data object..\n    if (handleErrorChecking()) {\n      // console.log(`!!!!!! name:`, userName);\n      // console.log(`!!!!!! email:`, userEmail);\n      // console.log(`!!!!!! message:`, userMessage);\n\n      // Collect data\n      let data = {\n        name: userName,\n        subject: userSubject,\n        email: userEmail,\n        message: userMessage,\n      };\n      // 'try' post fetch request..\n\n      try {\n        sendingNotification();\n\n        const response = await fetch(\n          // ! URI is defined at top of page for dev or production\n          `${URL}/send`,\n\n          {\n            method: \"POST\",\n            headers: {\n              \"Content-type\": \"application/json\",\n            },\n            body: JSON.stringify(data),\n          }\n        );\n\n        // Wait for the response and parse json data\n        const res = await response.json();\n        // console.log(response);\n        // On successful fetch (passed backend conditions) - handled in onSubmit of form..\n        // Alert user of success, reset the form and disable the form..\n        if (res.status === \"success\") {\n          // Toast message success notification\n          messageSentNotification();\n          // Reset form..\n          setUserName(\"\");\n          setUserSubject(\"\");\n          setUserEmail(\"\");\n          setUserMessage(\"\");\n          // Disable form after successful submit\n          setIsDisabled(true);\n        }\n        // console.log(res);\n      } catch (error) {\n        // Otherwise catch the error - will prevent the app from crashing even if the server is down..\n        console.log(\"!!!!!\", error);\n        // Toast message letting user know that message sending failed\n        messageFailedNotification();\n      }\n    }\n  };\n\n  return (\n    <>\n      {/* NavBar needs to be in individual view Component rather than App.js for mobile nav functionality */}\n      <NavBar />\n      <main className=\"contact-page-main-container\">\n        <ContactForm\n          handleUserData={handleUserData}\n          isDisabled={isDisabled}\n          updateUserData={updateUserData}\n          userName={userName}\n          userSubject={userSubject}\n          userEmail={userEmail}\n          userMessage={userMessage}\n        />\n      </main>\n    </>\n  );\n};\n\nexport default Contact;\n"]},"metadata":{},"sourceType":"module"}