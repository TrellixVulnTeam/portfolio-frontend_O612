{"ast":null,"code":"var _jsxFileName = \"/home/dci/Desktop/Repos/portfolio-frontend/src/Views/Contact/Contact.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport NavBar from \"../../Components/NavBar/NavBar\";\nimport ContactForm from \"./ContactForm\";\n\n// import axios from \"axios\";\n\n// AOS\nimport Aos from \"aos\";\nimport \"aos/dist/aos.css\";\n\n// Toast Alerts\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\ntoast.configure();\n\n// process.env for server is saved in Vercel\nlet URL = process.env.REACT_APP_BACKEND_URL;\n\n// ? Main Contact component\nconst Contact = () => {\n  _s();\n  // State Hooks\n  const [userName, setUserName] = useState(\"\");\n  const [userEmail, setUserEmail] = useState(\"\");\n  const [userMessage, setUserMessage] = useState(\"\");\n  const [userSubject, setUserSubject] = useState(\"\");\n  // Will disable form after submit\n  const [isDisabled, setIsDisabled] = useState(false);\n\n  // AOS functionality\n  useEffect(() => {\n    Aos.init({\n      duration: 1000,\n      once: true\n    });\n  }, []);\n\n  //  Toast alerts\n  // Form not filled in properly alert\n  const fillAllFieldsNotification = () => {\n    toast.error(\"Please fill in all fields 👀 \", {\n      position: \"top-center\",\n      draggable: false\n    });\n  };\n  const sendingNotification = () => {\n    toast.info(\"Message sending.. \", {\n      position: \"top-center\",\n      draggable: false\n    });\n  };\n\n  // ! incorrect email alert\n  // const incorrectEmailAlert = () => {\n  //   toast.error(\"Please enter a valid email address 📧 \", {\n  //     position: \"top-center\",\n  //     draggable: false,\n  //   });\n  // };\n\n  // Message sent alert\n  const messageSentNotification = () => {\n    toast(\"Message sent! Thanks for writing! 🎉 🌷 \", {\n      position: \"top-center\",\n      draggable: false\n    });\n  };\n\n  // Message failed alert (on catch error)\n  const messageFailedNotification = () => {\n    toast.error(\"Message failed to send 😔 \", {\n      position: \"top-center\",\n      draggable: false\n    });\n  };\n\n  // ? Function to get/update the user input via event.target.value\n  const updateUserData = event => {\n    // using switch statement to run through rather than making an individual handle function for each field - can add more if need be\n    switch (event.target.name) {\n      case \"userName\":\n        setUserName(event.target.value);\n        break;\n      case \"userEmail\":\n        setUserEmail(event.target.value);\n        break;\n      case \"userMessage\":\n        setUserMessage(event.target.value);\n        break;\n      case \"userSubject\":\n        setUserSubject(event.target.value);\n        break;\n      default:\n        break;\n    }\n  };\n\n  // ? Form validation\n  // To check all fields are filled out correctly - condition to be passed inside  handleUserData()\n  const handleErrorChecking = () => {\n    // validation is set to false\n    let validationSuccessful = false;\n\n    // if all filed input conditions are met ..\n    if (userName.length >= 1 && userSubject.length >= 1 && userMessage.length >= 2 && /^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$/.test(userEmail)) {\n      //.. validation is set to true\n      validationSuccessful = true;\n      // console.log(\"!!validation successful!!\");\n    }\n\n    // !!! Come back and check this.. and comment out type=\"email\" in form\n    // ! Check for incorrect email..\n    // if (userEmail !== /^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$/.test(userEmail)) {\n    //   validationSuccessful = false;\n    //   incorrectEmailAlert();\n    // }\n\n    // Otherwise false and an error alert telling user to fill in all fields will be displayed\n    else {\n      validationSuccessful = false;\n      // Toast error alert\n      fillAllFieldsNotification();\n    }\n    return validationSuccessful;\n  };\n\n  // ? Handle user data -\n  const handleUserData = async event => {\n    // Prevent from from reloading before submitting\n    event.preventDefault();\n\n    // axios.post(`${URI}/send`, { test: \"ok\" });\n    // If the form validation has been passed, create user data object..\n    if (handleErrorChecking()) {\n      // console.log(`!!!!!! name:`, userName);\n      // console.log(`!!!!!! email:`, userEmail);\n      // console.log(`!!!!!! message:`, userMessage);\n\n      // Collect data\n      let data = {\n        name: userName,\n        subject: userSubject,\n        email: userEmail,\n        message: userMessage\n      };\n      // 'try' post fetch request..\n\n      try {\n        sendingNotification();\n        const response = await fetch(\n        // ! URI is defined at top of page for dev or production\n        `${URL}/send`, {\n          method: \"POST\",\n          headers: {\n            \"Content-type\": \"application/json\"\n          },\n          body: JSON.stringify(data)\n        });\n\n        // Wait for the response and parse json data\n        const res = await response.json();\n        // console.log(response);\n        // On successful fetch (passed backend conditions) - handled in onSubmit of form..\n        // Alert user of success, reset the form and disable the form..\n        if (res.status === \"success\") {\n          // Toast message success notification\n          messageSentNotification();\n          // Reset form..\n          setUserName(\"\");\n          setUserSubject(\"\");\n          setUserEmail(\"\");\n          setUserMessage(\"\");\n          // Disable form after successful submit\n          setIsDisabled(true);\n        }\n        // console.log(res);\n      } catch (error) {\n        // Otherwise catch the error - will prevent the app from crashing even if the server is down..\n        console.log(\"!!!!!\", error);\n        // Toast message letting user know that message sending failed\n        messageFailedNotification();\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(NavBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"contact-page-main-container\",\n      children: /*#__PURE__*/_jsxDEV(ContactForm, {\n        handleUserData: handleUserData,\n        isDisabled: isDisabled,\n        updateUserData: updateUserData,\n        userName: userName,\n        userSubject: userSubject,\n        userEmail: userEmail,\n        userMessage: userMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(Contact, \"H1hMLlBa355Wib6G0OX8qyjWyNc=\");\n_c = Contact;\nexport default Contact;\nvar _c;\n$RefreshReg$(_c, \"Contact\");","map":{"version":3,"names":["React","useState","useEffect","NavBar","ContactForm","Aos","toast","configure","URL","process","env","REACT_APP_BACKEND_URL","Contact","userName","setUserName","userEmail","setUserEmail","userMessage","setUserMessage","userSubject","setUserSubject","isDisabled","setIsDisabled","init","duration","once","fillAllFieldsNotification","error","position","draggable","sendingNotification","info","messageSentNotification","messageFailedNotification","updateUserData","event","target","name","value","handleErrorChecking","validationSuccessful","length","test","handleUserData","preventDefault","data","subject","email","message","response","fetch","method","headers","body","JSON","stringify","res","json","status","console","log"],"sources":["/home/dci/Desktop/Repos/portfolio-frontend/src/Views/Contact/Contact.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport NavBar from \"../../Components/NavBar/NavBar\";\nimport ContactForm from \"./ContactForm\";\n\n// import axios from \"axios\";\n\n// AOS\nimport Aos from \"aos\";\nimport \"aos/dist/aos.css\";\n\n// Toast Alerts\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\ntoast.configure();\n\n// process.env for server is saved in Vercel\nlet URL = process.env.REACT_APP_BACKEND_URL;\n\n// ? Main Contact component\nconst Contact = () => {\n  // State Hooks\n  const [userName, setUserName] = useState(\"\");\n  const [userEmail, setUserEmail] = useState(\"\");\n  const [userMessage, setUserMessage] = useState(\"\");\n  const [userSubject, setUserSubject] = useState(\"\");\n  // Will disable form after submit\n  const [isDisabled, setIsDisabled] = useState(false);\n\n  // AOS functionality\n  useEffect(() => {\n    Aos.init({ duration: 1000, once: true });\n  }, []);\n\n  //  Toast alerts\n  // Form not filled in properly alert\n  const fillAllFieldsNotification = () => {\n    toast.error(\"Please fill in all fields 👀 \", {\n      position: \"top-center\",\n      draggable: false,\n    });\n  };\n\n  const sendingNotification = () => {\n    toast.info(\"Message sending.. \", {\n      position: \"top-center\",\n      draggable: false,\n    });\n  };\n\n  // ! incorrect email alert\n  // const incorrectEmailAlert = () => {\n  //   toast.error(\"Please enter a valid email address 📧 \", {\n  //     position: \"top-center\",\n  //     draggable: false,\n  //   });\n  // };\n\n  // Message sent alert\n  const messageSentNotification = () => {\n    toast(\"Message sent! Thanks for writing! 🎉 🌷 \", {\n      position: \"top-center\",\n      draggable: false,\n    });\n  };\n\n  // Message failed alert (on catch error)\n  const messageFailedNotification = () => {\n    toast.error(\"Message failed to send 😔 \", {\n      position: \"top-center\",\n      draggable: false,\n    });\n  };\n\n  // ? Function to get/update the user input via event.target.value\n  const updateUserData = (event) => {\n    // using switch statement to run through rather than making an individual handle function for each field - can add more if need be\n    switch (event.target.name) {\n      case \"userName\":\n        setUserName(event.target.value);\n        break;\n      case \"userEmail\":\n        setUserEmail(event.target.value);\n        break;\n      case \"userMessage\":\n        setUserMessage(event.target.value);\n        break;\n      case \"userSubject\":\n        setUserSubject(event.target.value);\n        break;\n      default:\n        break;\n    }\n  };\n\n  // ? Form validation\n  // To check all fields are filled out correctly - condition to be passed inside  handleUserData()\n  const handleErrorChecking = () => {\n    // validation is set to false\n    let validationSuccessful = false;\n\n    // if all filed input conditions are met ..\n    if (\n      userName.length >= 1 &&\n      userSubject.length >= 1 &&\n      userMessage.length >= 2 &&\n      /^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$/.test(userEmail)\n    ) {\n      //.. validation is set to true\n      validationSuccessful = true;\n      // console.log(\"!!validation successful!!\");\n    }\n\n    // !!! Come back and check this.. and comment out type=\"email\" in form\n    // ! Check for incorrect email..\n    // if (userEmail !== /^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$/.test(userEmail)) {\n    //   validationSuccessful = false;\n    //   incorrectEmailAlert();\n    // }\n\n    // Otherwise false and an error alert telling user to fill in all fields will be displayed\n    else {\n      validationSuccessful = false;\n      // Toast error alert\n      fillAllFieldsNotification();\n    }\n    return validationSuccessful;\n  };\n\n  // ? Handle user data -\n  const handleUserData = async (event) => {\n    // Prevent from from reloading before submitting\n    event.preventDefault();\n\n    // axios.post(`${URI}/send`, { test: \"ok\" });\n    // If the form validation has been passed, create user data object..\n    if (handleErrorChecking()) {\n      // console.log(`!!!!!! name:`, userName);\n      // console.log(`!!!!!! email:`, userEmail);\n      // console.log(`!!!!!! message:`, userMessage);\n\n      // Collect data\n      let data = {\n        name: userName,\n        subject: userSubject,\n        email: userEmail,\n        message: userMessage,\n      };\n      // 'try' post fetch request..\n\n      try {\n        sendingNotification();\n\n        const response = await fetch(\n          // ! URI is defined at top of page for dev or production\n          `${URL}/send`,\n\n          {\n            method: \"POST\",\n            headers: {\n              \"Content-type\": \"application/json\",\n            },\n            body: JSON.stringify(data),\n          }\n        );\n\n        // Wait for the response and parse json data\n        const res = await response.json();\n        // console.log(response);\n        // On successful fetch (passed backend conditions) - handled in onSubmit of form..\n        // Alert user of success, reset the form and disable the form..\n        if (res.status === \"success\") {\n          // Toast message success notification\n          messageSentNotification();\n          // Reset form..\n          setUserName(\"\");\n          setUserSubject(\"\");\n          setUserEmail(\"\");\n          setUserMessage(\"\");\n          // Disable form after successful submit\n          setIsDisabled(true);\n        }\n        // console.log(res);\n      } catch (error) {\n        // Otherwise catch the error - will prevent the app from crashing even if the server is down..\n        console.log(\"!!!!!\", error);\n        // Toast message letting user know that message sending failed\n        messageFailedNotification();\n      }\n    }\n  };\n\n  return (\n    <>\n      {/* NavBar needs to be in individual view Component rather than App.js for mobile nav functionality */}\n      <NavBar />\n      <main className=\"contact-page-main-container\">\n        <ContactForm\n          handleUserData={handleUserData}\n          isDisabled={isDisabled}\n          updateUserData={updateUserData}\n          userName={userName}\n          userSubject={userSubject}\n          userEmail={userEmail}\n          userMessage={userMessage}\n        />\n      </main>\n    </>\n  );\n};\n\nexport default Contact;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}